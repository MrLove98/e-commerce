version: '3.8'

services:
  zookeeper_1:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1

  kafka1_1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,
        EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,
        DOCKER://host.docker.internal:29092
      #Explain KAFKA_ADVERTISED_LISTENERS in above

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
        # Mỗi listener (như INTERNAL, EXTERNAL, DOCKER) được gán với một giao thức bảo mật.
        # Trong trường hợp này, cả 3 loại listener đều sử dụng giao thức PLAINTEXT (không mã hóa).
        # PLAINTEXT nghĩa là các kết nối sẽ không được mã hóa (không có SSL/TLS).
        #
        #Ví dụ thực tế: Nếu bạn muốn các kết nối từ bên ngoài Docker phải được bảo mật, bạn có thể thay đổi EXTERNAL thành SSL. Khi đó cấu hình có thể là:
        #  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:SSL,DOCKER:PLAINTEXT
      #  (Ứng dụng bên ngoài sẽ kết nối qua HTTPS thay vì HTTP)

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL  # Kafka sử dụng một cơ chế gọi là inter-broker communication để các broker (nếu bạn có nhiều broker) giao tiếp với nhau.
        # Thuộc tính này xác định listener nào sẽ được sử dụng để các broker liên lạc.
        # Ở đây, Kafka chọn INTERNAL làm kênh liên lạc giữa các broker.
        # Ví dụ thực tế:
        #Trong trường hợp bạn có 3 broker (Kafka cụm), chúng sẽ giao tiếp qua INTERNAL://kafka1:19092 hoặc tương tự.
        #
      # Tóm gọn lại ==> Broker giao tiếp với nhau qua listener INTERNAL.

      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
        # ý nghĩa: Kafka cần Zookeeper để quản lý thông tin cluster, các phân vùng (partitions), và trạng thái của các broker.
        # Thuộc tính này chỉ định địa chỉ của Zookeeper mà Kafka sẽ kết nối.
        #    Host: zookeeper1 (tên container của Zookeeper trong Docker Compose).
        #    Port: 2181 (cổng mặc định của Zookeeper).
        # Ví dụ thực tế:
      # Nếu Zookeeper chạy trên một máy khác hoặc bên ngoài Docker, bạn cần thay đổi giá trị thành địa chỉ đó, ví dụ: 192.168.1.100:2181.

      KAFKA_BROKER_ID: 1   # Mỗi Kafka broker trong cluster cần một ID duy nhất để nhận diện trong Cluster-Kafka
    depends_on:
      - zookeeper_1  # tên service:
    volumes:
      - kafka-data-v1:/var/lib/kafka-v1/data

volumes:
  kafka-data-v1:

#KAFKA_ADVERTISED_LISTENERS: là danh sách các "địa chỉ" (URL + Port) mà Kafka sẽ "quảng bá" để cho các client(ứng dụng) muốn
# kết nối đến kafka.
#     ====> Các "Listener" này đại diện cho các cách # nhau mà Kafka-Broker (instance Kafka) có thể được truy cập
#           vào ngữ cảnh (nội bộ Docker, qua mạng cục bộ, hoặc từ bên ngoài)

# INTERNAL://kafka1:19092 :==> Dành cho các dịch vụ bên trong mạng Docker-Compose (Các container khác trong cùng 1 mạng)
#       host is "kafka1"  Vì các container trong cùng 1 mạng Docker có thể gọi nhau = container-name
#       port is "19092"   là cổng mà các dịch vụ nội bộ sẽ dùng để connect to Kafka.
#
#    Ví dụ thực tế: Trong Docker-Compose: Các container khác (như zookeeper1) sẽ kết nói kafka1 qua kafka1:19092


#External://${DOCKER_HOST_IP:-127.0.0.1}:9092   :==> Dành cho các ứng dụng bên ngoài Docker(vd: từ máy tính cá nhân của bạn, hoặc 1 server# ngoài Docker)
#   Host is ${DOCKER_HOST_IP}  là địa chỉ IP của máy chạy Docker. Nếu biến môi trường này không được đặt, mặc định sẽ là 127.0.0.1.
#   Port: 9092 là cổng mà các ứng dụng bên ngoài sẽ dùng để truy cập Kafka.
#
#    Ví dụ thực tế: Từ máy tính cá nhân: Bạn chạy ứng dụng và kết nối đến Kafka1 qua 127.0.0.1:9092



#DOCKER://host.docker.internal:29092  :==> Dành cho: Các ứng dụng hoặc dịch vụ bên trong Docker Compose nhưng muốn truy cập Kafka thông qua môi trường Docker host.
#    Host: host.docker.internal (địa chỉ đặc biệt cho phép container gọi lại host).
#    Port: 29092 là cổng cho mục đích này.
#
#    Ví dụ thực tế: Từ container Docker gọi host: Bạn chạy ứng dụng và kết nối đến Kafka1 qua host.docker.internal:29092.


#-------------------------------------------------------------------------------------------------------
#  Tóm gọn ý nghĩa:
#    1:   Kafka quảng bá nhiều địa chỉ và cổng để đảm bảo client từ các ngữ cảnh khác nhau có thể kết nối dễ dàng:
#
#             Dịch vụ trong Docker -> Dùng INTERNAL.
#             Ứng dụng bên ngoài Docker -> Dùng EXTERNAL.
#             Docker host -> Dùng DOCKER.
#
#   2:    Cách Kafka xử lý kết nối:
#           Khi một client kết nối vào Kafka, Kafka sẽ chỉ định "listener" phù hợp (dựa vào ngữ cảnh) để giao tiếp với client.
#
#-------------------------------------------------------------------------------------------------------
#  Ví dụ thực tế: