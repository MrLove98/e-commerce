version: '3.8'
services:
  mongoDB:
    image: mongo:7.0.5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootuser@
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - e-commerce-mongo-db-data:/var/data
    networks:
      - e-commerce-network

  mysqlDB:
    image: mysql:8.0
    container_name: mysqldb
    ports:
      - '3308:3306'     # port_Host_Machine : port_default
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: rootuser@
    volumes:
      - e-commerce-mysql-db-data:/var/lib/mysql      # Custom named volume for MySQL data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Custom path for init script
    healthcheck:
      #      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      #      test: "mysql --user=$$MYSQL_DATABASE --password=$$MYSQL_ROOT_PASSWORD --execute \"SHOW DATABASES;\" || exit 1"
      #      test: ["CMD-SHELL", "mysql ping -h localhost -u root --password=$$MYSQL_ROOT_PASSWORD --execute \"SHOW DATABASES;\" || exit 1"]
      #      test: [ "CMD-SHELL", "mysql -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD --execute \"SHOW DATABASES;\" || exit 1" ]
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "--password=$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - e-commerce-network

  redis:
    image: redis:7.4
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - e-commerce-redis-data:/var/redis-v1/data
    networks:
      - e-commerce-network


  zookeeper-01:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper-01
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    networks:
      - e-commerce-network

  kafka-broker-01:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: kafka-broker-01
    ports:
      - "9092:9092"  # Cổng 9092 (External): cho Client giao tiếp với Kafka qua port 9092 trên máy chủ
      - "29092:29092"  # Cổng 29092(Internal - Docker): cổng dành riêng cho việc kết nối kafka trong môi trường Docker
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-01:19092,EXTERNAL://${DOKCER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
                    # INTERNAL: Using for communicate separate between Broker-Kafka living on 1-Cluster
                    # EXTERNAL: Allowing clients can access Broker-Kafka through   ${DOKCER_HOST_IP:-127.0.0.1}:9093
                    # DOCKER://host.docker.internal:29092  : Listener cho phép giao tiếp giữa các container Kafka trong cluster docker.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, EXTERNAL:PLAINTEXT, DOCKER:PLAINTEXT   # Thiết lập bảo mật, PLAINTEXT - ko mã hóa
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL  # Xác định listener dùng cho giap tiếp giữa các broker kafka, trong trường hợp này là INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-01:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  #topic "offset" lưu thông tin về vị trí đọc cuối cùng của mỗi consumer trong mỗi phân vùng của 1 kafka-topic
      # Số bản sao cho chủ đề nhật lý trạng thái giao dịch (transaction state log) trong kafka
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Chủ đề này lưu trữ thông tin về trạng thái cảu các giao dịch
      # Cho phép kafka khôi phục giao dịch đang dở trong các trường hợp broker gặp sự cố
    volumes:
      - e-commerce-kafka-broker-01-data:/var/kafka-broker-01/data
    networks:
      - e-commerce-network
    depends_on:
      - zookeeper-01

  kafka-broker-02:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: kafka-broker-02
    ports:
      - "9093:9093"  # Cổng 9093 (External): cho Client giao tiếp với Kafka qua port 9092 trên máy chủ
      - "29093:29093"  # Cổng 29093(Internal - Docker): cổng dành riêng cho việc kết nối kafka trong môi trường Docker
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-02:19093,EXTERNAL://${DOKCER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
        # INTERNAL: Using for communicate separate between Broker-Kafka living on 1-Cluster
        # EXTERNAL: Allowing clients can access Broker-Kafka through   ${DOKCER_HOST_IP:-127.0.0.1}:9093
      # DOCKER://host.docker.internal:29092  : Listener cho phép giao tiếp giữa các container Kafka trong cluster docker.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, EXTERNAL:PLAINTEXT, DOCKER:PLAINTEXT   # Thiết lập bảo mật, PLAINTEXT - ko mã hóa
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL  # Xác định listener dùng cho giap tiếp giữa các broker kafka, trong trường hợp này là INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-01:2181
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  #topic "offset" lưu thông tin về vị trí đọc cuối cùng của mỗi consumer trong mỗi phân vùng của 1 kafka-topic
      # Số bản sao cho chủ đề nhật lý trạng thái giao dịch (transaction state log) trong kafka
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Chủ đề này lưu trữ thông tin về trạng thái cảu các giao dịch
      # Cho phép kafka khôi phục giao dịch đang dở trong các trường hợp broker gặp sự cố
    volumes:
      - e-commerce-kafka-broker-02-data:/var/kafka-broker-02/data
    networks:
      - e-commerce-network
    depends_on:
      - zookeeper-01

#Todo: Config volumes persistence data
volumes:
  e-commerce-kafka-broker-01-data:
  e-commerce-kafka-broker-02-data:
  e-commerce-mongo-db-data:
  e-commerce-mysql-db-data:
  e-commerce-redis-data:

#Todo: Config network used for communicate between container
networks:
  e-commerce-network:
    name: e-commerce-network
    driver: bridge